pipeline {
    agent { label 'windows10' }

    environment {
        SOURCE_PATH = "\\\\Network\\Path\\To\\Your\\Archive.zip"
        DEST_PATH = "C:\\Local\\Path\\To\\Your\\Archive.zip"
        UNPACK_PATH = "C:\\Destination\\Path"
    }

    stages {
        stage('Copy Zip') {
            steps {
                powershell '''
                    Write-Host "Initiating the process to copy and unpack the zip file..."

                    # Check if source file exists
                    if (!(Test-Path -Path "$Env:SOURCE_PATH")) {
                        throw "ERROR: The source file $Env:SOURCE_PATH does not exist. Please verify the file path."
                    }

                    # Check if destination directory exists, if not, create it
                    $destinationDir = Split-Path -Path "$Env:DEST_PATH" -Parent
                    if (!(Test-Path -Path $destinationDir)) {
                        Write-Host "The destination directory $destinationDir does not exist. Creating the directory..."
                        New-Item -ItemType Directory -Path $destinationDir | Out-Null
                    }

                    # Delete the destination file if it exists
                    if (Test-Path -Path "$Env:DEST_PATH") {
                        Write-Host "The destination file $Env:DEST_PATH already exists. Deleting the existing file..."
                        Remove-Item -Path "$Env:DEST_PATH" -Force
                    }

                    # Copy the file from the network drive to the local directory with progress
                    Write-Host "Copying the file from $Env:SOURCE_PATH to $Env:DEST_PATH..."
                    $sourceFile = Get-Item -Path "$Env:SOURCE_PATH"
                    $destinationFile = New-Item -ItemType File -Path "$Env:DEST_PATH" -Force
                    $bufferSize = 4MB
                    $buffer = New-Object byte[] $bufferSize
                    $sourceStream = $sourceFile.OpenRead()
                    $destinationStream = $destinationFile.OpenWrite()
                    $bytesRead = 0
                    while (($readLength = $sourceStream.Read($buffer, 0, $bufferSize)) -ne 0) {
                        $destinationStream.Write($buffer, 0, $readLength)
                        $bytesRead += $readLength
                        Write-Progress -Activity "Copying `"$($sourceFile.Name)`"" -Status ("{0:N2} % Complete" -f ($bytesRead / $sourceFile.Length * 100))
                    }
                    $sourceStream.Close()
                    $destinationStream.Close()
                    Write-Host "File copy completed successfully."

                    # Verify the copy with a hash check
                    Write-Host "Verifying the integrity of the copied file..."
                    $sourceHash = Get-FileHash -Path "$Env:SOURCE_PATH" -Algorithm SHA256
                    $destHash = Get-FileHash -Path "$Env:DEST_PATH" -Algorithm SHA256
                    if ($sourceHash.Hash -ne $destHash.Hash) {
                        throw "ERROR: Hash check failed. The source and destination files are not identical. Please try again."
                    }
                    Write-Host "Hash check passed successfully. The copied file is verified."
                '''
            }
        }

        stage('Unpack Zip') {
            steps {
                powershell '''
                    # Function to unpack a zip file
                    function Unpack-ZipFile {
                        param(
                            [Parameter(Mandatory=$true)]
                            [string] $ZipFilePath,

                            [Parameter(Mandatory=$true)]
                            [string] $DestinationPath
                        )

                        # Check if destination directory exists, if not, create it
                        if (!(Test-Path -Path $DestinationPath -PathType Container)) {
                            Write-Host "The destination directory $DestinationPath does not exist. Creating the directory..."
                            New-Item -ItemType Directory -Path $DestinationPath | Out-Null
                        } else {
                            Write-Host "The destination directory $DestinationPath exists. The file will be unpacked into this directory."
                        }

                        # Unpack the zip file with progress
                        Write-Host "Starting to unpack $ZipFilePath to $DestinationPath..."
                        $shell = New-Object -ComObject Shell.Application
                        $zip = $shell.NameSpace($ZipFilePath)
                        $items = $zip.Items()
                        $destination = $shell.NameSpace($DestinationPath)
                        $totalItems = $items.Count
                        $index = 0
                        foreach ($item in $items) {
                            $destination.CopyHere($item)
                            $index++
                            Write-Progress -Activity "Unpacking $ZipFilePath" -Status ("{0:N2} % Complete" -f ($index / $totalItems * 100))
                        }
                        Write-Host "Unpacking completed successfully."
                    }

                    # Example usage
                    Unpack-ZipFile -ZipFilePath "$Env:DEST_PATH" -DestinationPath "$Env:UNPACK_PATH"
                '''
            }
        }
    }
}

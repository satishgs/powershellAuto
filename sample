# Jenkins Pipeline Guide: Running GUI Tests on a Windows Agent

This guide provides a detailed walkthrough on setting up a Jenkins Pipeline to run GUI tests on a Windows agent. We'll cover:

- How to use a parameterized Jenkins Pipeline to select the agent and environment for running the tests.
- How to keep a Windows RDC (Remote Desktop Connection) session active after disconnecting, which is often needed for GUI tests.

## 1. Setting up a Parameterized Jenkins Pipeline

In a Jenkins Pipeline, you can add choice parameters to select the agent and environment for your tests. Here's an example Jenkinsfile:

```groovy
properties([
    parameters([
        choice(
            name: 'AGENT_SELECTION',
            choices: ['agent1', 'agent2', 'agent3'],
            description: 'Choose an agent'
        ),
        choice(
            name: 'ENV_SELECTION',
            choices: ['development', 'staging', 'production'],
            description: 'Choose an environment'
        )
    ])
])

pipeline {
    agent { label "${params.AGENT_SELECTION}" }
    stages {
        stage('Build') {
            steps {
                echo 'Building..'
            }
        }
        stage('Test'){
            steps{
                echo 'Testing..'
            }
        }
        stage('Deploy'){
            steps{
                script {
                    if (params.ENV_SELECTION == 'production') {
                        echo 'Deploying to Production....'
                        // Add your production deployment steps here
                    } else if (params.ENV_SELECTION == 'staging') {
                        echo 'Deploying to Staging....'
                        // Add your staging deployment steps here
                    } else { // development
                        echo 'Deploying to Development....'
                        // Add your development deployment steps here
                    }
                }
            }
        }
    }
}
```

This Jenkinsfile declares two choice parameters: `AGENT_SELECTION` and `ENV_SELECTION`. You can choose an agent and an environment when you start a build. In the `Deploy` stage, the environment selection is used to determine which deployment steps to execute.

## 2. Keeping a Windows RDC Session Active

When running GUI tests, it's often necessary to keep the Windows RDC session active even after disconnecting. This can be done by using the `tscon` command to disconnect the RDC session while keeping the user session active on the server. This command can be integrated into the Jenkinsfile as follows:

```groovy
pipeline {
    agent { label 'windows' }
    stages {
        stage('Test') {
            steps {
                bat '''
                    REM Get Session ID
                    for /f "tokens=1,3" %%i in ('query session %username%') do (
                        if "%%j"=="Active" set RDC_SESSION_ID=%%i
                    )
                    REM Disconnect RDC session
                    tscon %RDC_SESSION_ID% /dest:console
                '''
                // Your visual tests go here
            }
        }
    }
}
```

This script retrieves the session ID of the current user session and uses `tscon` to disconnect the RDC session while keeping the user session active.

Please note that executing the `tscon` command requires that the Jenkins agent runs with a user account that has sufficient permissions to manage sessions. Also, security policies on the Windows machine may prevent `tscon` from being executed without elevated permissions. Ensure that Jenkins agent is configured properly and the user running the Jenkins agent has the necessary permissions.

By following the above steps, you should be able to setup a Jenkins pipeline to run GUI tests on a Windows agent and disconnect the RDC session while the tests are running.

## References:

- Jenkins Pipeline: https://www.jenkins.io/doc/book/pipeline/
- ts

con: https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/tscon
